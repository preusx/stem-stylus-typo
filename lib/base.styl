/**
 * Mxins
 * ======================================================================== */

/**
 * Opentype ligatures
 *
 * The vast majority of fonts contain lowercase and uppercase alphabets,
 * numerals, punctuation and accents.
 * Many professionally-designed fonts also contain ligatures, alternative
 * characters, smallcaps, different kinds of numbers, and sometimes much more
 * besides.
 * This enables it.
 *
 * Source: http://www.newnet-soft.com/blog/csstypography
 * Additional: http://blog.fontdeck.com/post/15777165734/opentype-1
 */
typo-open-type-ligatures()
    -moz-font-feature-settings    "liga=1, dlig=1"
    -ms-font-feature-settings     "liga", "dlig"
    -webkit-font-feature-settings "liga", "dlig"
    -o-font-feature-settings      "liga", "dlig"
    font-feature-settings         "liga", "dlig"


/**
 * Text Selection
 */
typo-selection()
  &::-moz-selection
    {block}

  &::selection
    {block}


/**
 * Hyphenation
 *
 * Hyphenation is the better word-break. Itâ€™s locale aware, and inserts the
 * hyphen character at the correct place, when breaking the words. This is
 * especially important in responsive designs. It will save you from a lot of
 * ragged lines. And, no need anymore for clunky & slow Javascript hyphenation
 * fallbacks.
 *
 * Source: http://www.newnet-soft.com/blog/csstypography
 */
typo-hyphenation()
    -ms-word-break break-all
    word-break break-all
    word-break break-word // webkit

    -webkit-hyphens auto
    -moz-hyphens auto
    -ms-hyphens auto
    -o-hyphens auto
    hyphens auto // none, auto, <number>

    -webkit-hyphenate-before 2
    -webkit-hyphenate-after  3
    hyphenate-lines          3



typo_font_scale()
    typo = typo-settings()

    return typo.scale.rate


typo_scaled(size=1)
    typo = typo-settings()

    if is_string(size) || is_ident(size)
        size = typo.size[size]

    $unit = unit(size)

    if $unit != ''
        // scale_geometric-progression(0.125em, i, 2)
        size = scale_arithmetic-progression_reverse(typo.scale.start,
            to_unit(size, typo.unit, typo.base), typo.scale.rate)

    size += typo.scale.offset

    return typo.scale.add + scale_arithmetic-progression(typo.scale.start, size, typo.scale.rate)


/**
 * Getting the relative size, based on the different font-size.
 */
typo_relative(base, current=@font-size, ratio=1)
    typo = typo-settings()

    return to_unit((to_px(base) ** 2 / to_px(current)) * ratio, typo.unit)


typo_line(line='base')
    typo = typo-settings()

    if is_string(line) || is_ident(line)
        return typo.line[line]
    else if is_unit(line)
        return line
    else
        return typo.line.base


typo-line(font_size=null, line=null)
    typo = typo-settings()

    if font_size != null
        font-size: typo_scaled(font_size)

    line-height: typo_line(line)


//
// TODO: Make baseline of two lines of text identical.
//       Now there is a trouble with a several pixels difference.
//
typo-inline(from, to)
    // f  -  Font size
    // l  -  Line height
    // sp -  Empty space difference
    typo = typo-settings()

    if !to
        to = from
        from = at_property('font-size')

    if is_list(from)
        f_f = to_px(unit(from[0]) == '' ? typo_scaled(from[0]) : to_px(from[0]))
        l_f = to_px(unit(from[1]) == '' ? to_px(typo_line() * f_f) : to_px(from[1]))
    else
        f_f = to_px(unit(from) == '' ? typo_scaled(from) : to_px(from))
        l_f = to_px(typo_line() * f_f)

    if is_list(to)
        f_t = to_px(unit(to[0]) == '' ? typo_scaled(to[0]) : to_px(to[0]))
        l_t = to_px(unit(to[1]) == '' ? to_px(typo_line() * f_t) : to_px(to[1]))
    else
        f_t = to_px(unit(to) == '' ? typo_scaled(to) : to_px(to))
        l_t = to_px(typo_line() * f_t)

    pt = at_partial('padding-top')
    pb = at_partial('padding-bottom')
    un = unit(pt)
    un = !!un ? un : typo.unit
    df = l_t - l_f
    ddf = ((l_t / f_t) + (l_f / f_f)) / 2

    offset = ceil(df / ddf + (l_t / f_t) - (l_f / f_f))

    pt = to_px(pt ? pt : 0) + offset
    pb = to_px(pb ? pb : 0) + df - offset

    padding-top to_unit(pt, un, f_f)
    padding-bottom to_unit(pb, un, f_f)


typo-paragraph(font_size=null, line=null, top=1, right=null, bottom=top, left=right)
    typo = typo-settings()
    typo-line(font_size, line)

    offsets = {top: top, left: left, right: right, bottom: bottom}
    offset = typo_scaled(1)

    for i in offsets
        if offsets[i] > 0
            margin-{i} offset * offsets[i]