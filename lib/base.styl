/**
 * Mxins
 * ======================================================================== */

typo_font_scale()
    typo = typo-settings()

    return typo.scale


typo_line_scale(line='base')
    typo = typo-settings()

    if is_string(line) || is_ident(line)
        return typo.line[line]
    else if is_unit(line)
        return line
    else
        return typo.line.base


typo_scaled(size=0)
    typo = typo-settings()
    $unit = unit(size)

    if $unit != ''
        px_size = to_px(size)
        size = px_size / typo.base
        size = ceil(math(size, 'log') / math(typo_font_scale(), 'log'))

    return round(typo.base * (typo_font_scale() ** size))


typo_line(font_size, line=null)
    typo = typo-settings()
    line = typo_line_scale(line)

    if unit(font_size) == ''
        font_size = typo_scaled(font_size)

    return grid_height(font_size * line)


/**
 * Opentype ligatures
 *
 * The vast majority of fonts contain lowercase and uppercase alphabets,
 * numerals, punctuation and accents.
 * Many professionally-designed fonts also contain ligatures, alternative
 * characters, smallcaps, different kinds of numbers, and sometimes much more
 * besides.
 * This enables it.
 *
 * Source: http://www.newnet-soft.com/blog/csstypography
 * Additional: http://blog.fontdeck.com/post/15777165734/opentype-1
 */
typo-open-type-ligatures()
    -moz-font-feature-settings    "liga=1, dlig=1"
    -ms-font-feature-settings     "liga", "dlig"
    -webkit-font-feature-settings "liga", "dlig"
    -o-font-feature-settings      "liga", "dlig"
    font-feature-settings         "liga", "dlig"


/**
 * Text Selection
 */
typo-selection()
  &::-moz-selection
    {block}

  &::selection
    {block}


/**
 * Hyphenation
 *
 * Hyphenation is the better word-break. Itâ€™s locale aware, and inserts the
 * hyphen character at the correct place, when breaking the words. This is
 * especially important in responsive designs. It will save you from a lot of
 * ragged lines. And, no need anymore for clunky & slow Javascript hyphenation
 * fallbacks.
 *
 * Source: http://www.newnet-soft.com/blog/csstypography
 */
typo-hyphenation()
    -ms-word-break break-all
        word-break break-all
        word-break break-word // webkit

    -webkit-hyphens auto
       -moz-hyphens auto
        -ms-hyphens auto
         -o-hyphens auto
            hyphens auto // none, auto, <number>

    -webkit-hyphenate-before 2
    -webkit-hyphenate-after  3
    hyphenate-lines          3


typo-line(font_size=null, line=null)
    if font_size == null
        font_size = @font-size
    else
        if unit(font_size) == ''
            font_size = typo_scaled(font_size)

        font-size font_size

    line-height typo_line(font_size, line)


typo-inline(from, to)
    // f  -  Font size
    // l  -  Line height
    // sp -  Empty space difference

    if to
        if is_array(from)
            f_f = unit(from[0]) == '' ? typo_scaled(from[0]) : to_px(from[0])
            l_f = unit(from[1]) == '' ? grid_height(from[1]) : to_px(from[1])
        else
            f_f = unit(from) == '' ? typo_scaled(from) : to_px(from)
            l_f = typo_line(from)

        if is_array(to)
            f_t = unit(to[0]) == '' ? typo_scaled(to[0]) : to_px(to[0])
            l_t = unit(to[1]) == '' ? grid_height(to[1]) : to_px(to[1])
        else
            f_t = unit(to) == '' ? typo_scaled(to) : to_px(to)
            l_t = typo_line(to)
    else
        from = at_property('font-size')
        to = from

    sp_f = l_f - f_f
    sp_t = l_t - f_t

    sp = max(sp_f, sp_t)
    sp -= min(sp_f, sp_t)

    pt = at_partial('padding-top')
    pb = at_partial('padding-bottom')

    padding-top pt + floor(sp / 2) + abs(f_f - f_t)
    padding-bottom pb + ceil(sp / 2)


typo-paragraph(font_size=null)
    typo = typo-settings()
    font_size = typo.base if font_size == null

    grid-offset-v(typo_line(typo.base))

    typo-line(font_size)
